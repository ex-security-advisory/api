defmodule ElixirSecurityAdvisoryApiV1.PackageVulnerabilityController do
  use ElixirSecurityAdvisoryApiV1, :controller

  plug :default_pagination, %{"first" => 10} when action in [:index]

  use Absinthe.Phoenix.Controller, schema: ElixirSecurityAdvisoryApiV1.Schema

  swagger_path :index do
    summary("List vulnerabilities of package")
    produces("application/json")

    parameter(
      :after,
      :query,
      :string,
      "List entries after cursor"
    )

    parameters do
      affectsVersion(
        :query,
        :string,
        "Only list vulnerabilities that are affecting the given version"
      )

      id(:path, :string, "package id")
      first(:query, :integer, "List the first X entries")
      last(:query, :integer, "List the last X entries")
      before(:query, :string, "List entries before cursor")
    end

    response(
      200,
      "OK",
      Schema.ref(:VulnerabilityList)
    )

    response(
      400,
      "Bad Request"
    )

    response(
      404,
      "Not Found"
    )
  end

  @graphql """
    query PackageVulnerabilities($id: ID!, $first: Int, $last: Int, $before: String, $after: String, $affectsVersion: String) {
      node(id: $id) {
        __typename
        ... on Package {
          vulnerabilities(first: $first, last: $last, before: $before, after: $after, affectsVersion: $affectsVersion) {
            pageInfo {
              endCursor
              startCursor
              hasNextPage
              hasPreviousPage
            }
            edges {
              cursor
              node {
                id
                cve
                description
                disclosureDate
                link
                oldestRevisionId
                patchedVersions
                package {
                  id
                  name
                }
                title
                unaffectedVersions
                revisions {
                  cve
                  description
                  disclosureDate
                  link
                  oldestRevisionId
                  patchedVersions
                  title
                  unaffectedVersions
                  newestRevisionId
                  revisionMessage
                }
              }
            }
          }
        }
      }
    }
  """
  def index(conn, %{errors: errors}) do
    conn
    |> put_resp_content_type("application/json")
    |> send_resp(:bad_request, Jason.encode!(errors))
  end

  def index(conn, %{data: %{"node" => %{"__typename" => type}}}) when type != "Package" do
    send_resp(conn, :not_found, "Not Found")
  end

  def index(conn, %{data: %{"node" => %{"vulnerabilities" => vulnerabilities}}}) do
    conn
    |> put_resp_content_type("application/json")
    |> send_resp(:ok, Jason.encode!(vulnerabilities))
  end
end
