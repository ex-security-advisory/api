defmodule ElixirSecurityAdvisoryApiV1.PubSubConsumer.Vulnerability do
  @moduledoc """
  Relay messages from ElixirSecurityAdvisory PubSub to Subscriptions
  """

  use GenServer

  @vulnerabilities Application.fetch_env!(:elixir_security_advisory, ElixirSecurityAdvisory)

  def start_link(_args) do
    GenServer.start_link(__MODULE__, nil, name: __MODULE__)
  end

  @impl GenServer
  def init(_args) do
    @vulnerabilities.subscribe_vulnerability(link: true)

    {:ok, nil}
  end

  @impl GenServer
  def handle_info({:added, %{package_id: package_id} = vulnerability}, state) do
    Absinthe.Subscription.publish(
      ElixirSecurityAdvisoryApi.Endpoint,
      vulnerability,
      vulnerability_added: :*,
      vulnerability_added: package_id
    )

    {:noreply, state}
  end

  def handle_info(
        {:changed, %{package_id: package_id, id: id} = vulnerability},
        state
      ) do
    Absinthe.Subscription.publish(
      ElixirSecurityAdvisoryApi.Endpoint,
      vulnerability,
      vulnerability_changed: :*,
      vulnerability_changed: id,
      vulnerability_changed: package_id
    )

    {:noreply, state}
  end

  def handle_info(_, state) do
    {:noreply, state}
  end
end
