defmodule ElixirSecurityAdvisoryApiV1.Schema.Subscription.VulnerabilityChangedTest do
  @moduledoc false

  use ElixirSecurityAdvisoryApiV1.GraphQLCase

  import Mox

  setup :set_mox_global
  setup :verify_on_exit!

  @subscription """
  subscription VulnerabilityChanged {
    vulnerabilityChanged {
      id
    }
  }
  """

  test "receives subscription", %{test: test, socket: socket} do
    start_supervised!({Phoenix.PubSub.PG2, name: :"#{__MODULE__}/#{test}"})

    stub(ElixirSecurityAdvisoryMock, :subscribe_vulnerability, fn _ ->
      Phoenix.PubSub.subscribe(:"#{__MODULE__}/#{test}", "topic")
    end)

    start_supervised!(ElixirSecurityAdvisoryApiV1.PubSubConsumer.Vulnerability)

    Phoenix.PubSub.broadcast(
      :"#{__MODULE__}/#{test}",
      "topic",
      {:changed, %{id: "xain/2018-01-01.yml", package_id: "xain", revisions: []}}
    )

    ref = push_doc(socket, @subscription)
    assert_reply(ref, :ok, %{})

    node_id = global_id(:vulnerability, "xain/2018-01-01.yml")

    assert_push(
      "subscription:data",
      %{
        result:
          %{
            data: %{
              "vulnerabilityChanged" => %{"id" => ^node_id}
            }
          } = result
      },
      1_000
    )

    assert_no_error(result)
  end
end
