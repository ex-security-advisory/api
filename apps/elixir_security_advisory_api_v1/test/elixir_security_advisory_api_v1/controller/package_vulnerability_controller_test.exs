defmodule ElixirSecurityAdvisoryApiV1.PackageVulnerabilityControllerTest do
  @moduledoc false

  use ElixirSecurityAdvisoryApi.ConnCase
  use ElixirSecurityAdvisoryApiV1.GraphQLCase

  import Mox

  alias ElixirSecurityAdvisoryApiV1.Router.Helpers, as: Routes

  describe "index" do
    test "loads list", %{conn: conn} do
      stub(ElixirSecurityAdvisoryMock, :get_package, fn _id ->
        %{
          id: "coherence",
          name: "coherence"
        }
      end)

      stub(ElixirSecurityAdvisoryMock, :list_vulnerabilities_by_package, fn _package ->
        [
          %{
            id: "packages/coherence/2017-08-02.yml",
            package_id: "coherence",
            revisions: [
              %{
                cve: nil,
                description:
                  "The Coherence library has \"Mass Assignment\"-like vulnerabilities. In particular, \"registration\"\nendpoints (like creating, editing, updating), allow users to update any coherence_fields. This\nmeans that, among other issues, users can automatically confirm their accounts by sending the\nconfirmed_at parameter with their registration request. Further, the library design and\ndocumentation encourages insecure functionality by default.\n\nFor example, the \"store\" demo allows registering users to add themselves as admin:\nhttps://github.com/smpallen99/store/blob/master/web/models/coherence/user.ex",
                disclosure_date: nil,
                link: %URI{
                  authority: "github.com",
                  fragment: nil,
                  host: "github.com",
                  path: "/smpallen99/coherence/issues/270",
                  port: 443,
                  query: nil,
                  scheme: "https",
                  userinfo: nil
                },
                newest_revision_id: nil,
                oldest_revision_id: "4a69ca0aa7367ce6265d95c9f72f95039cc5a86e",
                patched_versions: nil,
                revision_message: "Add coherence issue",
                title: "Permissive parameters and privilege escalation",
                unaffected_versions: nil
              }
            ]
          }
        ]
      end)

      stub(ElixirSecurityAdvisoryMock, :get_package_by_vulnerability, fn _vuln ->
        %{
          id: "coherence",
          name: "coherence"
        }
      end)

      assert resp =
               get(
                 conn,
                 "/v1/" <>
                   Routes.package_vulnerability_path(
                     conn,
                     :index,
                     global_id(:package, "coherence"),
                     first: 10
                   )
               )

      assert json_response(resp, :ok)
    end
  end
end
